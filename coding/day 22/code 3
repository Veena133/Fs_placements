/*Add two numbers
-------------------------------
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each node contains a single digit.
 Add the two numbers and return the sum as a linked list.

You may assume that the two numbers do not contain any leading zeros, except the number 0 itself.

Sample Testcase:1
-------------------------------
input=3                                                                               
2 4 3                                                                           
3                                                                               
5 6 4                                                                           
output=7 0 8

Explanation:
--------------------------------
Enter number of nodes in List 1: 3
Enter values for List 1:
2 4 3
Enter number of nodes in List 2: 3
Enter values for List 2:
5 6 4
Resultant Linked List after Addition: 
7 0 8 
*/
class Solution
{
     public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
         ListNode fake = new ListNode(0);
         ListNode curr = fake;
         int remainder = 0;
         while(l1 != null || l2 != null || remainder !=0){
             int sum = remainder;
             if(l1 !=null){
                 sum = sum+l1.val;
                 l1 = l1.next;
             }
             if(l2 != null){
                 sum = sum+l2.val;
                 l2 = l2.next;
             }
             
             remainder = sum/10;
             int digit = sum%10;
             curr.next = new ListNode(digit);
             curr = curr.next;
         }
         return fake.next;
    }
}

