/*Given the head of a linked list, return the node where the cycle begins. 
If there is no cycle, return null.

There is a cycle in a linked list if some node in the list can be reached again
 by continuously following the next pointer. Internally, you may use the pos 
variable to denote the index of the node where the tail connects to. 
You must solve it without modifying the linked list, and with O(1) space.

Sample Testcase:1
-----------------------------
input=4
3 2 0 -4
1
output=2
*/
  class Solution
  {
  public ListNode detectCycle(ListNode head) {
      ListNode slow = head;
      ListNode fast = head;
      while(fast!=null && fast.next!=null){
          slow = slow.next;
          fast = fast.next.next;
          
          if(slow == fast){
              slow = head;
              while(slow != fast){
                  slow = slow.next;
                  fast = fast.next;
              }
              return slow;
          }
      }
      return null;
  }
  }
