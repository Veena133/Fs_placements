/*Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.


Sample Testcase:1
------------------------------
input=3
2 1 3
output=true

input=7
5 1 4 -1 -1 3 6
Output=false
Explanation:
---------------------------
The root node's value is 5 but its right child's value is 4.
  */

// class TreeNode {
//     int val;
//     TreeNode left;
//     TreeNode right;

 
//     public TreeNode(int val) {
//         this.val = val;
//         this.left = null;
//         this.right = null;
//     }
// }

public class Solution {

    public boolean isValidBST(TreeNode root) {
        
}
}

import java.util.*;
public class Solution {

    public boolean isValidBST(TreeNode root) {
        List<Integer> al = new ArrayList<>();
        checker(root,al);
        boolean flag = true;
        for(int i=0;i<al.size()-1;i++){
            if(al.get(i)>al.get(i+1)){
                flag = false;
                break;
            }
        }
        return flag;
}
public void checker(TreeNode node,List<Integer> al){
    if(node ==null) return;
    checker(node.left,al);
    al.add(node.val);
    checker(node.right,al);
}
}
