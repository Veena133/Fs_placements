/*Given an m x n matrix grid where each row is sorted in non-decreasing order, 
you need to find the number of negative numbers in the matrix.

Complete in O(log n) time.

Sample Testcase:1
---------------------------

input=4 4
4 3 2 -1
3 2 1 -1
1 1 -1 -2
-1 -1 -2 -3
output=8
*/
import java.util.*;
public class Test{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n = sc.nextInt();
        int a[][] = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                a[i][j] = sc.nextInt();
            }
        }
        System.out.println(countNegative(a,m,n));
    }
    public static int countNegative(int a[][],int m,int n){
        int cnt=0;
        for(int i=0;i<m;i++){
            int l=0;int r = n-1;
                while(l<=r){
                    int mid = l+(r-l)/2;
                    if(a[i][mid]<0){
                        r = mid-1;
                    }
                    else{
                        l = mid+1;
                    }
                }
                cnt+=(n-l);
            }
            return cnt;
        }
    }

