/*
You are given a 2D grid (image) made up of numbers where each number represents a color 
of a pixel. The image has n rows and m columns.

You are also given a starting pixel located at (sr, sc) (row and column) and a new color.

Your task is to fill the entire region connected to the starting pixel with the new color. 
A region is a group of connected pixels that have the same original color as the starting pixel. 
You can only move in 4 directions: up, down, left, and right.

You must perform this using DFS (Depth-First Search).

Input Format:
-----------------------------
Two integers n and m — number of rows and columns.
n lines each with m integers — representing the grid (colors of pixels).
Three integers: sr, sc, and newColor — starting row, column, and the color to apply.

Output Format:
--------------------------
Print the updated grid after performing flood fill.


Sample Testcase:1
-------------------------------
input=4 4
1 1 1 2
1 1 0 2
1 0 1 2
0 0 0 2
1 1 5
Output=
5 5 5 2
5 5 0 2
5 0 1 2
0 0 0 2
Explanation:
----------------------
The original color at position (1, 1) is 1.
All connected 1s around (1, 1) should be changed to 5.
  */
import java.util.*;
class Solution{
    static int[][] dir ={{0,1},{1,0},{0,-1},{-1,0}};
    public static void main(String args[]){
        Scanner scanner = new Scanner(System.in);
         int m=scanner.nextInt();
         int n=scanner.nextInt();
        int grid[][] = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                grid[i][j]=scanner.nextInt();
            }
        }
        
        int sr = scanner.nextInt();
        int sc = scanner.nextInt();
        int color = scanner.nextInt();
        int check = grid[sr][sc];
        if(grid[sr][sc]==color){
             for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                System.out.println(grid[i][j]+" ");
            }
            System.out.println();
        }
    }
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{sr,sc});
        while(!queue.isEmpty()){
            int curr[]=queue.poll();
            int cr=curr[0];
            int cc=curr[1];
            grid[cr][cc]=color;
            for(int []d :dir){
                int nr=cr+d[0];
                int nc=cc+d[1];
                if(nr>=0 && nr<m && nc>=0 && nc<n && grid[nr][nc]==check){
                    queue.offer(new int[]{nr,nc});
                    }
            }
    }
    for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                System.out.print(grid[i][j]+" ");
            }
            System.out.println();
        }
    }
}
