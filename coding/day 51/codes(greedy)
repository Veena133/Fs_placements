At a lemonade stand, each lemonade costs $5. Customers are standing in a queue 
to buy from you and order one at a time (in the order specified by bills). 
Each customer will only buy one lemonade and pay with either a $5, $10, 
or $20 bill. You must provide the correct change to each customer so that the 
net transaction is that the customer pays $5.

Note that you do not have any change in hand at first.

Given an integer array bills where bills[i] is the bill the ith customer pays, 
return true if you can provide every customer with the correct change, 
or false otherwise.

Sample TestCase:1
--------------------------
input=5
5 5 5 10 20
output=true

Explanation:
-----------------------------
From the first 3 customers, we collect three $5 bills in order.
From the fourth customer, we collect a $10 bill and give back a $5.
From the fifth customer, we give a $10 bill and a $5 bill.
Since all customers got correct change, we output true.
import java.util.*;
class Solution{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n= sc.nextInt();
        int a[] = new int[n];
        for(int i=0;i<a.length;i++){
            a[i]=sc.nextInt();
        }
        int bal=0;
        if(a[0]>5){
            System.out.println("false");
            return;
        } 
        for(int i=0;i<a.length;i++){
            if(a[i]==5) bal+=a[i];
            else if(bal<5) {
                System.out.println("false");
                return;
            }
            else if(bal>=5){
                bal-=a[i];
                bal+=5;
            }
        }
        System.out.println("true");
    }
}




Given n activities defined by its start time and end time, the maximum number 
of activities such that no two activities overlap.

Sample Testcase:1
------------------------
input=5
5 7
1 4
0 6
8 9
3 5
output=
[1, 4]
[5, 7]
[8, 9]


import java.util.*;
class Solution{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[][] = new int[n][2];
        for(int i=0;i<n;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
        }
       Arrays.sort(a,(x,y)->Integer.compare(x[1],y[1]));
       List<int[]> l = new ArrayList<>();
       int time=-1;
       for(int i=0;i<a.length;i++){
           if(a[i][0]>=time){
               l.add(a[i]);
               time=a[i][1];
           }
       }
       for(int [] nums:l){
           System.out.println("["+nums[0]+", "+nums[1]+"]");
       }
        
    }
}




You are given a positive integer num consisting only of digits 6 and 9.
Return the maximum number you can get by changing at most one digit 
(6 becomes 9, and 9 becomes 6).

Sample TestCase:1
------------------------
input=9669
output=9969

Explanation: 
-----------------------------
Changing the first digit results in 6669.
Changing the second digit results in 9969.
Changing the third digit results in 9699.
Changing the fourth digit results in 9666.
The maximum number is 9969.
import java.util.*;
class Solution{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        StringBuilder s = new StringBuilder(str);
        int i=0;
        while(i<s.length()){
            if (s.charAt(i) == '6'){
                s.setCharAt(i, '9'); 
                break; 
                }
            i++;
        }
        System.out.println(s);
    }
}

You are given an integer num. You can swap two digits at most once to get 
the maximum valued number.
Return the maximum valued number you can get.

Sample Testcase:1
--------------------------
input=2736
output=7236
Explanation: Swap the number 2 and the number 7.
import java.util.*;
class Solution{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        String s= sc.next();
        StringBuilder str = new StringBuilder(s);
        int max=Integer.MIN_VALUE;
        int ind=-1;
        for(int i=0;i<s.length();i++){
            int dig = s.charAt(i)-'0';
            if(dig>=max){
                max=dig;
                ind=i;
            }
        }
        char c=s.charAt(0);
        str.setCharAt(0,(char)(max+'0'));
        str.setCharAt(ind,c);
        System.out.println(str);
    }
}


import java.util.*;
public class Test{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        int a[] = new int[s.length()];
        for(int i=0;i<s.length();i++){
            a[i]= s.charAt(i)-'0';
        }
        int idx[] = new int[10];
        for(int i=0;i<a.length;i++)idx[a[i]]=i;
        boolean flag = true;
        for(int i=0;i<a.length;i++){
            for(int d=9;d>a[i];d--){
                if(idx[d]>i){
                    int temp=a[i];
                    a[i]=a[idx[d]];
                    a[idx[d]]=temp;
                    flag = true;
                    break;
                }
            }
            if(flag = true)break;
        }
        for(int i=0;i<a.length;i++)System.out.print(a[i]);
    }
}
Given an array of intervals intervals where intervals[i] = [starti, endi], 
return the minimum number of intervals you need to remove to make the rest of 
the intervals non-overlapping.

Note that intervals which only touch at a point are non-overlapping. For 
example, [1, 2] and [2, 3] are non-overlapping.

Sample Testcase:1
----------------------------------
input=4
1 2
2 3
3 4
1 3
output=1

Explanation:
-----------------------
[1,3] can be removed and the rest of the intervals are 
non-overlapping.

import java.util.*;
class Solution{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n= sc.nextInt();
        int a[][] = new int[n][2];
        for(int i=0;i<a.length;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
        }
        Arrays.sort(a,(x,y)->Integer.compare(x[1],y[1]));
       /* List<int[]> l = new ArrayList<>();
        int time=-1;
        for(int i=0;i<a.length;i++){
            if(a[i][0]>=time){
                l.add(a[i]);
                time=a[i][1];
            }
        }*/
        int count=0;
        int time=a[0][1];
        for(int i=1;i<a.length;i++){
            if(a[i][0]<time){
                count++;
                time=a[i][1];
            }
        }
     
        // System.out.println(a.length-l.size());
         System.out.println(count);
    }
}
