/*There is a directed graph of n nodes with each node labeled from 0 to n - 1. 
The graph is represented by a 0-indexed 2D integer array graph where graph[i] 
is an integer array of nodes adjacent to node i, meaning there is an edge from
 node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node
if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. 
The answer should be sorted in ascending order.

Note: If a node has no outgoing edges, enter an empty line

Sample Testcase:1
------------------------------------------------------
input=7
1 2
2 3
5
0
5


Output=[2,4,5,6]
Explanation:
--------------------------------
The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.
Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.
*/
import java.util.*;
class Solution{
public static List<Integer> eventualSafeNodes(int[][] graph){
    int n = graph.length;
    int vis[] = new int[n];
    List<Integer> res = new ArrayList<>();
    for(int i=0;i<n;i++){
        if(dfs(i,graph,vis)){
            res.add(i);
        }
    }
    return res;
    }
public static boolean dfs(int node,int graph[][],int vis[]){
    if(vis[node]==1) return false;
    if(vis[node]==2) return true;
    vis[node]=1;
    for(int n:graph[node]){
        if(!dfs(n,graph,vis)){
            return false;
        }
    }
    vis[node]=2;
    return true;
    }

}

