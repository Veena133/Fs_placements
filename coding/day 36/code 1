/*There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. 
Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.

When you visit a room, you may find a set of distinct keys in it. Each key has a number on 
it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.

Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited
 room i, return true if you can visit all the rooms, or false otherwise.

Sample Testcase:1
--------------------------------------------
input=[[1],[2],[3],[]]
output: true

Explanation:
------------------------------- 
We visit room 0 and pick up key 1.
We then visit room 1 and pick up key 2.
We then visit room 2 and pick up key 3.
We then visit room 3.
Since we were able to visit every room, we return true.

Sample Testcase:2
--------------------------------------------
input=[[1,3],[3,0,1],[2],[0]]
output=false
Explanation: 
--------------------------------------
We can not enter room number 2 since the only key that unlocks it is in that room.
*/
import java.util.*;
 class Solution
  {
  public static boolean canVisitAllRooms(List<List<Integer>> rooms) {
      boolean vis[] = new boolean[rooms.size()];
      dfs(0,rooms,vis);
      /*Queue<Integer> queue = new LinkedList<>();
      queue.offer(0);
      vis[0]=true;
      while(!queue.isEmpty()){
          int n = queue.poll();
          for(int i:rooms.get(n)){
              if(!vis[i]){
              vis[i] = true;
              queue.offer(i);
              }
          }
      }*/
      for(boolean f : vis){
          if(!f){
              return false;
          }
      }
      return true;
  }
  public static void dfs(int curr, List<List<Integer>> rooms, boolean[] vis){
      vis[curr] = true;
      for(int i:rooms.get(curr)){
          if(!vis[i]){
              dfs(i,rooms,vis);
          }
      }
      
  }
}
