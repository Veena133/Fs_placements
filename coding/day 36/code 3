/*
Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Sample Testcase:1
----------------------------------------
input=1 2 3
output=[[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]
  */
import java.util.*;

public class Solution{
    public static List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, 0, new ArrayList<>(), result);
        return result;
    }
    private static void backtrack(int[] nums, int start, List<Integer> currentSubset, List<List<Integer>> result) {
        result.add(new ArrayList<>(currentSubset));
        for (int i = start; i < nums.length; i++) {
            currentSubset.add(nums[i]);
            backtrack(nums, i + 1, currentSubset, result);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }

    public static void main(String[] args){
    Scanner sc = new Scanner(System.in);
    String s[] = sc.nextLine().split(" ");
    int a[] = new int[s.length];
    for(int i=0;i<a.length;i++){
        a[i]=Integer.parseInt(s[i]);
        }
        List<List<Integer>> result = subsets(a);
        System.out.println(result);
    }

}
