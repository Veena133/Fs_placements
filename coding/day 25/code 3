/*Write a program to perform the stack operations
push(), pop(), top(), and retrieving the minimum element in constant time.

The order of operations are:
1. void push(int E) -- Inset element E onto stack.
2. void pop() -- Delete the element on top of the stack.
3. int top() -- Print the top element.
4. int getMin() -- Print the minimum element in the stack.
0. to Stop the execution.

Input Format:
-------------
	-	Each Line consist of Operation number from the list [ 1, 2, 3, 4, 0 ], 
		and list of space separated parameters if any.
	for better understanding check sample testcases.
	
Output Format:
--------------
Print integers in new line.


Sample Input-1:
---------------
1 -2
1 0
1 -3
4
2
3
4
0

Sample Output-1:
----------------
-3
0
-2

*/
import java.util.*;
class Solution{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        Stack<Integer> stack = new Stack<>();
        while(true){
            int check= sc.nextInt();
            switch (check){
                case 1: 
                    int n=sc.nextInt();
                    stack.push(n);
                    break;
                case 2:
                    stack.pop();
                    break;
                case 3:
                    System.out.println(stack.peek());
                    break;
                case 4:
                    int min = minNo(stack);
                    System.out.println(min);
                    break;
                case 0:
                    System.exit(0);
            }
        }
    }
    public static int minNo(Stack<Integer> stack){
        int min=Integer.MAX_VALUE;
        for(int val:stack){
            if(val<min){
                min = val;
            }
        }
        return min;
    }
}


import java.util.*;
public class Test{
    static ArrayList<Integer> al = new ArrayList<>();
    public static void push(int x){
        al.add(x);
    }
    public static void pop(){
        if(!al.isEmpty()){
        al.remove(al.size()-1);}
    }
    public static int top(){
        if(!al.isEmpty()){
       return al.get(al.size()-1);
    }
    return -1;
    }
    public static int getmin(){
        if(!al.isEmpty()){
            ArrayList<Integer>minL = new ArrayList<>(al);
            Collections.sort(minL);
            return minL.get(0);
        }
        return -1;
    }
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> a1 = new ArrayList<>();
        while(true){
            int op = sc.nextInt();
            switch(op){
                case 0:
                    for(int i=0;i<a1.size();i++){
            System.out.println(a1.get(i));
        }
                    return;
                case 1:
                    int x = sc.nextInt();
                    push(x);
                    break;
                case 2:
                    pop();
                    break;
                case 3:
                    a1.add(top());
                    break;
                case 4:
                    a1.add(getmin());
                    break;
            }
        }
        
    }
}

