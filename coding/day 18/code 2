/*A password security system needs to check if a password contains at least one 
substring with all unique characters.

If such a substring exists, return its length.

If all characters are the same, return -1.

Your task is to write a program that takes a string s and finds the length of
the longest substring that has no duplicate characters.
If no unique substring exists, return -1.


Sample Testcase:1
---------------------------------
input=abcabcbb
output=3
Explanation:
-------------------
The answer is "abc", with the length of 3.
*/
import java.util.*;
class Solution{
    public static void main(String args[]){
        Scanner sc =new Scanner(System.in);
        String s=sc.next();
        HashSet<Character> h= new HashSet<>();
        int i=0,j=0;
        int len = -1;
        while(j<s.length()){
            if(!h.contains(s.charAt(j))){
                h.add(s.charAt(j));
                len=Math.max(len,j-i+1);
                j++;
            }
            else{
                        h.remove(s.charAt(i));
                        i++;
                }
            }
        
        System.out.println(len);
    }
}
