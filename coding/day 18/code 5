/*Given two strings s and p, return an array of all the start indices of p's anagrams in s.
You return the answer in sorted order.

Sample Testcase:1
------------------------------------
input=cbaebabacd abc
output=[0,6]

Explanation:
-------------------------------------
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
*/
import java.util.*;

public class Solution{
    public static void main(String[] args){
    Scanner sc = new Scanner(System.in);
        String s = sc.next();
        String t = sc.next();
        char[] c1=t.toCharArray();
        ArrayList<Integer> a= new ArrayList<>();
        Arrays.sort(c1);
        for(int i=0;i<s.length()-t.length()+1;i++){
            String s1 = s.substring(i,i+t.length());
            char[] c=s1.toCharArray();
            Arrays.sort(c);
            if(Arrays.equals(c1,c)){
                a.add(i);
            }
        }
        System.out.println(a);
    }
}

import java.util.*;

public class Test {
    public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
        String s = sc.next();
        String p = sc.next();
        List<Integer> result = new ArrayList<>();
        if (s.length() < p.length()) {
            System.out.println(result);
            return;
            }
        
        int[] pCount = new int[26];
        int[] sCount = new int[26]; 
        
        for (int i = 0; i < p.length(); i++) {
            pCount[p.charAt(i) - 'a']++;
            sCount[s.charAt(i) - 'a']++;
        }
        if (Arrays.equals(pCount, sCount)) {
            result.add(0);}
        for (int i = p.length(); i < s.length(); i++) {
            sCount[s.charAt(i) - 'a']++; 
            sCount[s.charAt(i - p.length()) - 'a']--; 
            
            if (Arrays.equals(pCount, sCount)) {
                result.add(i - p.length() + 1);
            }
        }
        
        System.out.println(result);
    }

}


