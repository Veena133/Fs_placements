/*
You are given a set of integers set[] and a search element E, 
last integer in the set[] is -1 indicates end of the binary tree.

You need to construct a binary tree, (Do not insert last integer, -1).
with the following property: left-node < parent-node < right-node.
The first number in the set[] is always root node.

Print the sub-tree, if you find the search element in the binary tree.
Otherwise, print "Not Found"

Input Format:
-------------
Line-1 : Space separated integers, set[] ending with -1.
Line-2 : An integer E, seacrh element.

Output Format:
--------------
Print the sub-tree in in-order traversal.


Sample Input-1:
---------------
4 2 6 1 3 5 6 -1
2

Sample Output-1:
----------------
1 2 3

Explanation:
------------
Given Binary Tree is:
				 4
				/  \
			  2     6
			/  \   /   \
		   1     3 5    7
		
Search element is 2:
sub-tree of 2 is->
		2
	   /  \
	  1    3
In-Order is : 1 2 3

===== HINT =====
The binary tree property given is left-node < parent-node < right-node.
Indicates you should build a Binary Search Tree.
You have to do three operations to achive the output.
	1) Insert into BST.
		- Insert the first element as root node, from second element onwards.
		- Compare the inserting element with root, 
		  if less than root, then recurse for left, else recurse for right.
		- After reaching end, just insert that node at left(if less than current) else right.
		
	2) Search inBST.
		- Start from root.
		- Compare the search element with root, 
		  if less than root, then recurse for left, else recurse for right.
		- If element to search is found anywhere, return true, else return false.
		
	3) Print result in In-Order (Left, Root, Right).
		- Traverse the left subtree.
		- Visit the root, print the value at root.
		- Traverse the right subtree.

/*
class Node { 
	int key; 
	Node left, right; 

	public Node(int item) { 
		key = item; 
		left = right = null; 
	} 
} 
*/
*/
class Solution
{
    	public Node search(Node root, int key) 
	{ 
	    if (root == null) return null;
        if (root.key == key) return root;
        if (key < root.key)
            return search(root.left, key);
        else
            return search(root.right, key); 
	} 
	
}
