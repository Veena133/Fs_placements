/*Given an m x n integers matrix, return the length of the longest increasing 
path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. 
You may not move diagonally or move outside the boundary 

Sample Testcase:1
----------------------------
input=2 2
3 4
2 1
output=4
Explanation:
-----------------------------------
Longest path is [1 → 2 → 3 → 4]

*/
import java.util.*;
class Solution{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        
        int a[][] = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                a[i][j]=sc.nextInt();
            }
        }
        Queue<int[]> queue = new LinkedList<>();
         int dir[][] = {{0,1},{1,0},{0,-1},{-1,0}};
        int b[][] = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                for(int [] d:dir){
                int newR = i+d[0];
                int newC = j+d[1];
                if(newR>=0 && newR<m && newC>=0 && newC <n && a[newR][newC]>a[i][j]){
                   b[newR][newC]++;
                    }
                }
            }
        }
         for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(b[i][j]==0){
                    queue.offer(new int[]{i,j});
                }
            }
         }
        
        int len=0;
        while(!queue.isEmpty()){
            int size= queue.size();
            len++;
            for(int s=0;s<size;s++){
                int [] curr = queue.poll();
            int row=curr[0];
            int col=curr[1];
            for(int [] d:dir){
                int newR = row+d[0];
                int newC = col+d[1];
                if(newR>=0 && newR<m && newC>=0 && newC <n && a[newR][newC]>a[row][col]){
                    b[newR][newC]--;
                    if(b[newR][newC]==0){
                        queue.offer(new int[]{newR,newC});
                    }
                }
            }
        }
        }
        System.out.println(len);
    }
}



