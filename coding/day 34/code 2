/*A power company is designing a power distribution tree made up of bulbs with different voltage ratings.

The bulbs are arranged in a binary tree structure, level by level.
Level 0 contains the main power source (root bulb).
From level 1 onward, each bulb can have at most two child bulbs (left and right), connected directly.
A missing bulb is indicated by -1 in the input (i.e., an empty attachment).
The structure is provided in level-order format (i.e., top to bottom, left to right).
Your task is to:
Return an ArrayList containing the averages at each level of the power distribution tree.


Input Format:
-------------
A single line of space separated integers, voltages of the set of bulbs.

Output Format:
--------------
Print a list of double values (averages of each level)

Sample Input-1:
---------------
3 8 4 3 5 -1 7 

Sample Output-1:
----------------
[3.0, 6.0, 5.0]

Sample Input-2:
---------------
3 8 4 3 5 7 7 

Sample Output-2:
----------------
[3.0, 6.0, 5.5]
*/
import java.util.*;
 class Solution
  {
    public static ArrayList<Double> getAveragePerLevel(TreeNode root) {
        ArrayList<Double> l = new ArrayList<>();
        if(root==null) return l;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int n= queue.size();
            double sum=0;
            for(int i=0;i<n;i++){
                TreeNode node = queue.poll();
                sum+=node.val;
                if(node.left!=null) queue.offer(node.left);
                if(node.right!=null) queue.offer(node.right);
            }
            l.add((double)(sum/n));
        }
        return l;
    }
  }

