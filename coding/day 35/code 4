/*Bubloo is working with computer networks, where servers are connected 
in a hierarchical structure, represented as a Binary Tree. Each server (node) 
is uniquely identified by an integer value.

Bubloo has been assigned an important task: find the shortest communication 
path (in terms of network hops) between two specific servers in the network.

Network Structure:
------------------
The network of servers follows a binary tree topology.
Each server (node) has a unique identifier (integer).
If a server does not exist at a certain position, it is represented as '-1' (NULL).

In Solution Class, Given the root of the network tree, and two specific 
server IDs (E1 & E2), determine the minimum number of network hops (edges) 
required to communicate between these two servers.

Input Format:
-------------
Space separated integers, elements of the tree.

Output Format:
--------------
Print an integer value.


Sample Input-1:
---------------
1 2 4 3 5 6 7 8 9 10 11 12
4 8

Sample Output-1:
----------------
4
Explanation:
------------
The edegs between 4 and 8 are: [4,1], [1,2], [2,3], [3,8]

Sample Input-2:
---------------
1 2 4 3 5 6 7 8 9 10 11 12
6 6

Sample Output-2:
----------------
0

Explanation:
------------
No edegs between 6 and 6.
*/
/*class Node
{
    int data;
    Node left, right;
    Node(int data)
    {
        this.data = data;
        left = right = null;
    }
}
*/

import java.util.*;
class Solution
{
   int lowestCommonAncestor(Node root, int p, int q){
     if(root == null || p==q) return 0;
     Node n = helper(root,p,q);
     return n!=null?n.data:-1;
    }
    
    Node helper(Node root,int p,int q){
        if(root == null) return null;
        if (root.data == p || root.data == q) return root;

    Node left = helper(root.left, p, q);
    Node right = helper(root.right, p, q);

    if (left != null && right != null) return root; 
    return left != null ? left : right;

    }
}
