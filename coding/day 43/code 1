/*Given an 2D character array, Letters[][], of size r*c.
You have to construct the word W, using the given array.

Rules to construct the word are as follows:
	- All the letters of the word W, should be adjacent to each other 
	in the array Letters(either horizontal or vertical).
	- You can use each charcater in Letters[][] only once.

If you are able to construct the word W, return 'true'
Otherwise 'false'.

Input Format:
-------------
Line-1 -> two integers R and C, array size.
R lines -> C space separated characters.
Last line -> a string, word W

Output Format:
--------------
print the boolean result.


Sample Input-1:
---------------
3 3
a b c
d e f
g h i
bad

Sample Output-1:
----------------
true

Sample Input-2:
---------------
3 3
a b c
d e f
g h i
ace

Sample Output-2:
----------------
false


Sample Input-3:
---------------
3 3
a b c
d e f
g h i
add

Sample Output-3:
----------------
False
*/
import java.util.*;
class Solution{
    static int[][] dir={{0,-1},{0,1},{-1,0},{1,0}};
    static int m,n;
    static String str;
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        m=sc.nextInt();
        n=sc.nextInt();
        char word[][]= new char[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                String s=sc.next();
                word[i][j]=s.charAt(0);
            }
        }
        str= sc.next();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(dfs(word,i,j,0)){
                    System.out.println("true");
                    return;
                }
            }
        }
        System.out.println("false");
    }
    public static boolean dfs(char[][] word,int r, int c,int ind){
        if(ind==str.length()) return true;
        if(r<0 || r>=m || c<0 || c>=n || word[r][c]!=str.charAt(ind)) return false;
        char temp = word[r][c];
        word[r][c]='#';
        for(int [] d:dir){
            if(dfs(word,r+d[0],c+d[1],ind+1)) return true;
        }
        word[r][c]=temp;
        return false;
    }
}
