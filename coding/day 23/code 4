/*You have given flatland in the form of m*n grid,
The land conatins some ponds represented as 0,
and the land represented as 1.

Your task is to find the number of square-grids which contains no pond. 


Input Format:
-------------
Line-1: Two integers M and N.
Next M lines: N space separated integers.

Output Format:
--------------
Print an integer, number of square-grids.


Sample Input-1:
---------------
3 4
0 1 1 1
1 1 1 1
0 1 1 1

Sample Output-1:
----------------
15

Explanation:
------------
There are 10 square-grids of side length 1.
There are 4 square-grids of side length 2.
There is 1 square-grid of side length 3.

Total number of square-grids without a pond in it = 10 + 4 + 1 = 15.


Sample Input-2:
---------------
3 3
1 0 1
1 1 0
1 1 0

Sample Output-2:
----------------
7

Explanation:
------------
There are 6 square-grids of side length 1.
There is 1 square-grid of side length 2.
Total number of square-grids without a pond in it = 6 + 1 = 7.
  */
import java.util.*;
public class Test{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int a[][]= new int[n][m];
        int dp[][] = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                a[i][j] = sc.nextInt();
            }
        }
        int count = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++){
                if(a[i][j] == 1) {
                    if(i == 0 || j == 0){
                        dp[i][j] = 1;  
                    }
                    else{
                        dp[i][j] = 1 + Math.min(dp[i-1][j], Math.min(dp[i][j-1], dp[i-1][j-1]));
                    }
                    count += dp[i][j]; }
                    else{
                    dp[i][j] = 0; 
                }
            }
        }
        System.out.println(count);
    }
}

import java.util.*;
public class Solution{
    private static final int[][] directions = {{0, 1},{1, 0},{0, -1}, {-1, 0}};
    public static int countTotalSquares(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int totalSquares = 0;
        boolean[][] visited = new boolean[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1){
                    totalSquares += countSquaresFromCell(grid, i, j);
                }
            }
            
        }
        return totalSquares;
    }
    private static int countSquaresFromCell(int[][] grid, int startRow, int startCol) {
        int rows = grid.length, cols = grid[0].length;
        int maxSize = 1;
        boolean canExpand = true;
        while (canExpand){
            int newRow = startRow + maxSize;
            int newCol = startCol + maxSize;

            if (newRow >= rows || newCol >= cols) break;

            for (int i = startRow; i <= newRow; i++) {
                if (grid[i][newCol] == 0) {
                    canExpand = false;
                    break;
                }
            }
            for (int j = startCol; j <= newCol; j++) {
                if (grid[newRow][j] == 0) {
                    canExpand = false;
                    break;
                }
            }

            if (canExpand) maxSize++;
        }

        return maxSize;
    }

    public static void main(String[] args){
    Scanner sc= new Scanner (System.in);
    int m=sc.nextInt();
    int n= sc.nextInt();
    int a[][] = new int[m][n];
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            a[i][j]=sc.nextInt();
            }
        }
        System.out.println(countTotalSquares(a));
    

}

}
