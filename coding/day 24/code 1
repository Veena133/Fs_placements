/*You are given a 2D grid of size m x n. Each cell in the grid contains a value 0.
Your task is to start at a given cell (startRow, startCol) and use Depth-First Search 
(DFS) to traverse the entire grid. During the traversal, you need to display the coordinates
of every cell visited in the grid.

Instructions:
--------------------------------
You must use DFS to traverse the grid.
Print the coordinates of every visited cell.
The traversal should cover all cells in the grid.

Sample Testcase:1
-----------------------------
input=4 4
0 0  //starting
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
output=(0, 0)
(0, 1)
(0, 2)
(0, 3)
(1, 3)
(2, 3)
(3, 3)
(3, 2)
(3, 1)
(3, 0)
(2, 0)
(1, 0)
(1, 1)
(2, 1)
(2, 2)
(1, 2)
*/
import java.util.*;
class Solution{
    static  int [][]dir={{-1,0},{1,0},{0,-1},{0,1}};
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        int grid[][]= new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                grid[i][j]=sc.nextInt();
            }
        }
        
        boolean visited[][]= new boolean[m][n];
        dfs(0,0,grid,visited,m,n);
    }
    public static void dfs(int row,int col,int[][] grid,boolean[][] visited,int m,int n){
        if(row>=0 && col >=0 && row<m && col<n && visited[row][col]==false){
       
        visited[row][col] = true;
        System.out.println("("+row+","+col+")");
      
        for(int[] d : dir ){
            int newRow = row+d[0];
            int newCol = col+d[1];
            dfs(newRow,newCol,grid,visited,m,n);
        }
        }
    }
}

