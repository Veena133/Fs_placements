1)
Given a m x n grid filled with non-negative numbers, find a path from 
top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Sample Testcase:1
-------------------------------
input=3 3
1 3 1
1 5 1
4 2 1
output=7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum

import java.util.Scanner;

public class Solution {

    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        // Initialize the first row
        for (int i = 1; i < n; i++) {
            grid[0][i] += grid[0][i - 1];
        }

        // Initialize the first column
        for (int i = 1; i < m; i++) {
            grid[i][0] += grid[i - 1][0];
        }

        // Fill the rest of the grid
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);
            }
        }

        return grid[m - 1][n - 1];
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Read grid size
        int m = sc.nextInt();
        int n = sc.nextInt();
        int[][] grid = new int[m][n];

        // Read grid values
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                grid[i][j] = sc.nextInt();
            }
        }

        Solution sol = new Solution();
        int result = sol.minPathSum(grid);
        System.out.println(result);
    }
}
2)
Given two integers n and k, return all possible combinations of k numbers 
chosen from the range [1, n].


Sample Testcase:1
-------------------------------
input=4 2
output=[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]
Explanation: There are 4 choose 2 = 6 total combinations.

Note that combinations are unordered, i.e., [1,2] and [2,1] are considered 
to be the same combination.

import java.util.*;
class Solution
{
    /*public static void sortListOfList(List<List<Integer>> Subsets)
    {
        Collections.sort(Subsets, (a, b) ->
        {
            int sizeA = a.size();
            int sizeB = b.size();
    
            // Compare element by element
            for (int i = 0; i < Math.min(sizeA, sizeB); i++)
            {
                if (!a.get(i).equals(b.get(i)))
                {
                    return a.get(i) - b.get(i);
                }
            }
    
            // If all elements are equal, compare by size
            return sizeA - sizeB;
        });
        
    }*/
    public static void backtrack(List<List<Integer>> res, List<Integer> al,int start, int n,int k)
    {
        if(al.size()==k)
        {
            res.add(new ArrayList<>(al));
            return;
        }
        for(int i=start;i<=n;i++)
        {
            if(al.contains(i)) continue;
            al.add(i);
            backtrack(res,al,i+1,n,k);
            al.remove(al.size()-1);
        }
    }
    public static void main(String args[])
    {
        Scanner S=new Scanner(System.in);
        int n=S.nextInt();
        int k=S.nextInt();
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> al=new ArrayList<>();
        backtrack(res,al,1,n,k);
        System.out.print(res);
    }
}

3)
A valid IP address consists of exactly four integers separated by single dots. 
Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.

For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses, 
but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses.
Given a string s containing only digits, return all possible valid IP addresses 
that can be formed by inserting dots into s. You are not allowed to reorder or 
remove any digits in s. You may return the valid IP addresses in any order.

Sample Testcase:1
----------------------------------------
input=25525511135
output=[255.255.11.135, 255.255.111.35]

import java.util.*;
class test
{
    public static void main(String args[])
    {
        Scanner S=new Scanner(System.in);
        String str=S.nextLine();
        List<String> res=new ArrayList();
        
        List<String> al=new ArrayList();
        backtrack(res,al,0,str);
        System.out.print(res);
    }
    public static void backtrack(List<String> res,List<String> al,int start,String str)
    {
        if(al.size()==4 && start==str.length())
        {
            res.add(String.join(".",al));
            return ;
        }
        if(al.size()>4) return ;
        for(int i=1;i<=3 && i+start<=str.length();i++)
        {
            String sub=str.substring(start,i+start);
            if(Valid(sub))
            {
                al.add(sub);
                backtrack(res,al,start+i,str);
                al.remove(al.size()-1);
            }
            
        }
        
    }
    public static boolean Valid(String sub)
    {
        if(sub.length()>1 && sub.charAt(0)=='0') return false;
        int x =Integer.parseInt(sub);
        if(x<0 || x>255) return false;
        return true;
    }
}

4)
Given an array of distinct integers candidates and a target integer target, 
return a list of all unique combinations of candidates where the chosen numbers 
sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. 
Two combinations are unique if the frequency of at least one of the chosen 
numbers is different.

The test cases are generated such that the number of unique combinations that 
sum up to target is less than 150 combinations for the given input.

case=1
input=4
2 3 8 7
7
output=[[2, 2, 3], [7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.


import java.util.*;
class test
{
    public static void main(String args[])
    {
        Scanner S=new Scanner(System.in);
        int n=S.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=S.nextInt();
        }
        int k=S.nextInt();
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> al=new ArrayList<>();
        
        backtrack(res,al,0,k,arr);
        System.out.print(res);
    }
    public static void backtrack(List<List<Integer>> res,List<Integer> al,int start,int k,int arr[])
    {
        if(Sum(al)>k) return;
        
        if(Sum(al)==k)
        {
            res.add(new ArrayList(al));
            return;
        }
        for(int i=start;i<arr.length;i++)
        {
            al.add(arr[i]);
            backtrack(res,al,i,k,arr);
            al.remove(al.size()-1);
        }
    }
    
    public static int Sum(List<Integer> arr)
    {
        int sum=0;
        for(int num:arr)
        {
            sum+=num;
        }  
        return sum;
    }
}

5)
Given a string containing digits from 2-9 inclusive, return all possible 
letter combinations that the number could represent.
A mapping of digits to letters (just like on the telephone buttons) 
is given below. 

2-> a, b, c
3-> d, e, f
4-> g, h, i
5-> j, k, l
6-> m, n, o
7-> p, q, r, s
8-> t, u, v
9-> w, x, y, z

Note:'1' does not map to any letters. The result should be in ascending order.
 
Sample Testcase:1
----------------------------
input=2
output=[a, b, c]

Sample Testcase:2
----------------------------
input=23
output=[ad, ae, af, bd, be, bf, cd, ce, cf]

import java.util.*;
class test
{
    public static void main(String args[])
    {
        Scanner S = new Scanner(System.in);
        String str=S.next();
        HashMap<Integer,String> hm=new HashMap<>();
        hm.put(2,"abc");
        hm.put(3,"def");
        hm.put(4,"ghi");
        hm.put(5,"jkl");
        hm.put(6,"mno");
        hm.put(7,"pqrs");
        hm.put(8,"tuv");
        hm.put(9,"wxyz");
        StringBuilder sb=new StringBuilder();
        List<String> al=new ArrayList<>();
        backtrack(al,sb,hm,0,str);
        System.out.print(al);
    }
    public static void backtrack(List<String> res,StringBuilder sb,HashMap<Integer,String> hm, int start,String str)
    {
        if(start==str.length())
        {
            res.add(sb.toString());
            return;
        }
        int x=str.charAt(start)-'0';
        for(char ch:hm.get(x).toCharArray())
        {
            sb.append(ch);
            backtrack(res,sb,hm,start+1,str);
            sb.deleteCharAt(sb.length()-1);
        }
        
    }
}

6)
Given the root of a binary tree, return the vertical order traversal of its 
nodes' values. (i.e., from top to bottom, column by column).
If two nodes are in the same row and column, the order should be from 
left to right.

Sample Testcase:1
----------------------------
input=7
3 9 20 -1 -1 15 7
output=[[9], [3, 15], [20], [7]]

import java.util.*;
/*class Node
{
    int data;
    Node left, right;
    Node(int data)
    {
        this.data = data;
        left = right = null;
    }
}
*/
class Solution
{
    List<List<Integer>> verticalOrder(Node root)
    {
        // Implement your code here
        if(root == null) return new ArrayList<>();
        Map<Integer, List<Integer>> hm = new TreeMap<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(new TreeNode(root,0));
        while(!q.isEmpty())
        {
            TreeNode t = q.poll();
            Node node = t.node;
            int col = t.col;
            hm.putIfAbsent(col, new ArrayList());
            hm.get(col).add(node.data);
            if(node.left != null)
            {
                q.offer(new TreeNode(node.left,col-1));
            }
            if(node.right != null)
            {
                q.offer(new TreeNode(node.right,col+1));
            }
        }
        List<List<Integer>> res=new ArrayList<>();
        for(List<Integer> al:hm.values())
        {
            res.add(al);
        }
        return res;
    }
}
class TreeNode{
    Node node;
    int col;
    TreeNode(Node node,int col)
    {
        this.node = node;
        this.col = col;
    }
}


7)
Given a positive integer n, return the punishment number of n.

The punishment number of n is defined as the sum of the squares of all 
integers i such that:

Sample Testcase:1
-------------------------------------
input=10
output=182

Explanation:
---------------------------------
There are exactly 3 integers i in the range [1, 10] that 
satisfy the conditions in the statement:
- 1 since 1 * 1 = 1
- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 and 1 with a sum 
equal to 8 + 1 == 9.
- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 and 0 with a 
sum equal to 10 + 0 == 10.
Hence, the punishment number of 10 is 1 + 81 + 100 = 182

import java.util.Scanner;

public class Solution {

    // Main method
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        Solution sol = new Solution();
        int result = sol.punishmentNumber(n);
        System.out.println(result);
    }

    // Method to calculate punishment number
    public int punishmentNumber(int n) {
        int total = 0;

        for (int i = 1; i <= n; i++) {
            int square = i * i;
            String squareStr = String.valueOf(square);

            if (canPartition(squareStr, 0, i)) {
                total += square;
            }
        }

        return total;
    }

    // Recursive method to check if squareStr can be partitioned to sum to target
    private boolean canPartition(String str, int index, int target) {
        if (index == str.length()) {
            return target == 0;
        }

        int num = 0;

        for (int i = index; i < str.length(); i++) {
            num = num * 10 + (str.charAt(i) - '0');

            if (num > target) {
                break;
            }

            if (canPartition(str, i + 1, target - num)) {
                return true;
            }
        }

        return false;
    }
}
