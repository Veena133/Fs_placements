/*You are given the root of a binary tree containing digits from 0 to 9 only.
Each root-to-leaf path in the tree represents a number.
Return the total sum of all root-to-leaf numbers. 

Sample Testcase:1
-------------------------------------
input=2 3 5 1 4 6 7
output=978


Explanation:
----------------------------------
2 → 3 → 1 = 231
2 → 3 → 4 = 234
2 → 5 → 6 = 256
2 → 5 → 7 = 257
Total: 231 + 234 + 256 + 257 = 978
/*class Node
{
    int data;
    Node left, right;
    Node(int data)
    {
        this.data = data;
        left = right = null;
    }
}
*/
*/
import java.util.*;
class Solution
{
    public static int sumNumbers(Node root)
    {
    
    return check(root,0);
    }
    public static int check(Node root,int sum){
        if(root==null) return 0;
        sum = sum*10 + root.data;
        if(root.left==null && root.right==null){
            return sum;
        }
        return check(root.left,sum)+check(root.right,sum);
      
    }
}





