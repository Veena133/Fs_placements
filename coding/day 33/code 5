/*Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest
 path from the root node down to the farthest leaf node.

Sample Testcase:1
-----------------------------
input=3 9 20 -1 -1 15 7
output=3

import java.util.*;
/*class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int val) {
        this.val = val;
    }
}*/
*/
class Solution {
    public int maxDepth(TreeNode root) {
        List<List<Integer>> res= new ArrayList<>();
        if(root ==null ) return 0;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int n=queue.size();
            List<Integer> l = new ArrayList<>();
            for(int i=0;i<n;i++){
                TreeNode value = queue.poll();
                l.add(value.val);
                if(value.left!=null) queue.offer(value.left);
                if(value.right!=null) queue.offer(value.right);
            }
            res.add(l);
        }
        return res.size();
    }
}

class Solution {
    public int maxDepth(TreeNode root) {
       return helper(root,0);
    }
    public static int helper(TreeNode root,int len){
    if(root==null) return len;
    return len = Math.max(helper(root.left,len+1),helper(root.right,len+1));
    }
    
}

