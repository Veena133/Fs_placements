/*Given the root of a binary tree, return all root-to-leaf paths in any order.
A leaf is a node with no children.


Sample test case:1
---------------------------------
input=5
1 2 3 -1 5
output=[[1, 2, 5], [1, 3]]

      1
     / \
    2   3
     \
      5

Explanation: There are two paths from root to lead are 1->2->5 and 1->3
  */
import java.util.*;

class Solution{
    public List<List<Integer>>binaryTreePaths(Node node){
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> route = new ArrayList<>();
        navigate(node,route,res);
        return res;
    }
    public void navigate(Node node, List<Integer> route,List<List<Integer>> res){
        if(node ==null)return;
        route.add(node.data);
        if(node.left == null && node.right ==null){
            res.add(new ArrayList<>(route));
        }
        else{
            navigate(node.left,route,res);
            navigate(node.right,route,res);
        }
        int n =route.size()-1;
        route.remove(n);
    }

}
