/*Given an integer array nums where the elements are sorted in ascending order, 
convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the 
depth of the two subtrees of every node never differs by more than one.

Sample Testcase:1
-------------------------------------
input=-10 -3 0 5 9
output=0 -3 9 -10 null 5


*/
import java.util.*;

/*class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int v) { val = v; }
}*/



class Solution {
    public TreeNode sortedArrayToBST(int[] nums)
    {
        int n=nums.length;
        int l=0;
        int r=n-1;
        return BST(nums,l,r);
    }
    public TreeNode BST(int nums[], int l,int r)
    {
        if(l>r) return null;
        int mid=(l+r)/2;
        TreeNode root=new TreeNode(nums[mid]);
        root.left=BST(nums,l,mid-1);
        root.right=BST(nums,mid+1,r);
        
        return root;
    }
}        
